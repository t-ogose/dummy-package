import { Worker } from 'node:worker_threads';
import { dirname, extname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import { g as getOptions, a as getFilter, p as pluginName, i as initialStylelint, b as getWatcher, s as shouldIgnore, c as getFileFromId, d as getLintFiles } from './shared/vite-plugin-stylelint.8a1a2f6f.mjs';
import 'chokidar';
import 'tty';
import '@rollup/pluginutils';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const ext = extname(__filename);
function StylelintPlugin(userOptions = {}) {
  const options = getOptions(userOptions);
  const filter = getFilter(options);
  let stylelint;
  let formatter;
  let lintFiles;
  let watcher;
  let worker;
  return {
    name: pluginName,
    apply(_, { command }) {
      return command === "serve" && options.dev || command === "build" && options.build;
    },
    async buildStart() {
      if (!worker && options.lintInWorker) {
        worker = new Worker(resolve(__dirname, `worker${ext}`), {
          workerData: { options }
        });
        if (options.lintOnStart) {
          worker.postMessage(options.include);
        }
        return;
      }
      if (!stylelint) {
        const result = await initialStylelint(options);
        stylelint = result.stylelint;
        formatter = result.formatter;
        lintFiles = getLintFiles(stylelint, formatter, options);
      }
      if (!watcher && options.chokidar) {
        watcher = getWatcher(lintFiles, options);
      }
      if (options.lintOnStart) {
        this.warn(
          `
Stylelint is linting all files in the project because \`lintOnStart\` is true. This will significantly slow down Vite.`
        );
        await lintFiles(options.include, this);
      }
    },
    async transform(_, id) {
      if (options.chokidar)
        return null;
      if (shouldIgnore(id, filter))
        return null;
      const file = getFileFromId(id);
      if (worker)
        worker.postMessage(file);
      else
        await lintFiles(file, this);
      return null;
    },
    async buildEnd() {
      if (watcher == null ? void 0 : watcher.close)
        await watcher.close();
    },
    async closeBundle() {
      if (watcher == null ? void 0 : watcher.close)
        await watcher.close();
    }
  };
}

export { StylelintPlugin as default };
