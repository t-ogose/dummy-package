'use strict';

const node_worker_threads = require('node:worker_threads');
const node_path = require('node:path');
const node_url = require('node:url');
const utils = require('./shared/vite-plugin-stylelint.140c9ecc.cjs');
require('chokidar');
require('tty');
require('@rollup/pluginutils');

const __filename$1 = node_url.fileURLToPath((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (document.currentScript && document.currentScript.src || new URL('index.cjs', document.baseURI).href)));
const __dirname$1 = node_path.dirname(__filename$1);
const ext = node_path.extname(__filename$1);
function StylelintPlugin(userOptions = {}) {
  const options = utils.getOptions(userOptions);
  const filter = utils.getFilter(options);
  let stylelint;
  let formatter;
  let lintFiles;
  let watcher;
  let worker;
  return {
    name: utils.pluginName,
    apply(_, { command }) {
      return command === "serve" && options.dev || command === "build" && options.build;
    },
    async buildStart() {
      if (!worker && options.lintInWorker) {
        worker = new node_worker_threads.Worker(node_path.resolve(__dirname$1, `worker${ext}`), {
          workerData: { options }
        });
        if (options.lintOnStart) {
          worker.postMessage(options.include);
        }
        return;
      }
      if (!stylelint) {
        const result = await utils.initialStylelint(options);
        stylelint = result.stylelint;
        formatter = result.formatter;
        lintFiles = utils.getLintFiles(stylelint, formatter, options);
      }
      if (!watcher && options.chokidar) {
        watcher = utils.getWatcher(lintFiles, options);
      }
      if (options.lintOnStart) {
        this.warn(
          `
Stylelint is linting all files in the project because \`lintOnStart\` is true. This will significantly slow down Vite.`
        );
        await lintFiles(options.include, this);
      }
    },
    async transform(_, id) {
      if (options.chokidar)
        return null;
      if (utils.shouldIgnore(id, filter))
        return null;
      const file = utils.getFileFromId(id);
      if (worker)
        worker.postMessage(file);
      else
        await lintFiles(file, this);
      return null;
    },
    async buildEnd() {
      if (watcher == null ? void 0 : watcher.close)
        await watcher.close();
    },
    async closeBundle() {
      if (watcher == null ? void 0 : watcher.close)
        await watcher.close();
    }
  };
}

module.exports = StylelintPlugin;
